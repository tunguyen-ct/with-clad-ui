/**
 * @typedef {import('styled-system__css').CSSProperties} CSSProperties
 * @typedef {import('styled-system__css').SystemStyleObject} SystemStyleObject
 */
/**
 * @typedef { keyof theme['colors'] } Colors
 * @typedef { keyof theme['fonts'] } Fonts
 * @typedef { keyof theme['fontWeights'] } FontWeights
 * @typedef { keyof theme['gradients'] } Gradients
 * @typedef { keyof theme['space'] } Space
 * @typedef { keyof theme['fontSizes'] } FontSizes
 * @typedef { keyof theme['shadows']  } Shadows
 * @typedef { keyof theme['borderWidths']} BorderWidths
 * @typedef { keyof theme['radii'] } Radii
 * @typedef { keyof theme['sizes'] } Sizes
 */
/**
 * @typedef {object} ThemableStyle - Themeable style object
 * @property {Fonts | Fonts[]}                 [fontFamily]
 * @property {FontSizes | FontSizes[]}         [fontSize]
 * @property {FontWeights | FontWeights[]}     [fontWeight]
 * @property {string | string[]}               [lineHeight]
 * @property {string | string[]}               [letterSpacing]
 * @property {Colors | Colors[]}               [color]
 * @property {Colors | Colors[]}               [backgroundColor]
 * @property {Colors | Colors[]}               [bg] short hand for background color
 * @property {Space | Space[]}                 [margin]
 * @property {Space | Space[]}                 [m]
 * @property {Space | Space[]}                 [marginTop]
 * @property {Space | Space[]}                 [mt]
 * @property {Space | Space[]}                 [marginRight]
 * @property {Space | Space[]}                 [mr]
 * @property {Space | Space[]}                 [marginBottom]
 * @property {Space | Space[]}                 [mb]
 * @property {Space | Space[]}                 [marginLeft]
 * @property {Space | Space[]}                 [ml]
 * @property {Space | Space[]}                 [marginX]
 * @property {Space | Space[]}                 [mx]
 * @property {Space | Space[]}                 [marginY]
 * @property {Space | Space[]}                 [my]
 * @property {Space | Space[]}                 [padding]
 * @property {Space | Space[]}                 [p]
 * @property {Space | Space[]}                 [paddingTop]
 * @property {Space | Space[]}                 [pt]
 * @property {Space | Space[]}                 [paddingRight]
 * @property {Space | Space[]}                 [pr]
 * @property {Space | Space[]}                 [paddingBottom]
 * @property {Space | Space[]}                 [pb]
 * @property {Space | Space[]}                 [paddingLeft]
 * @property {Space | Space[]}                 [pl]
 * @property {Space | Space[]}                 [paddingX]
 * @property {Space | Space[]}                 [px]
 * @property {Space | Space[]}                 [paddingY]
 * @property {Space | Space[]}                 [py]
 * @property {Space | Space[]}                 [top]
 * @property {Space | Space[]}                 [bottom]
 * @property {Space | Space[]}                 [left]
 * @property {Space | Space[]}                 [right]
 * @property {string | string[]}               [border]
 * @property {string | string[]}               [borderTop]
 * @property {string | string[]}               [borderRight]
 * @property {string | string[]}               [borderBottom]
 * @property {string | string[]}               [borderLeft]
 * @property {Colors | Colors[]}               [borderColor]
 * @property { BorderWidths | BorderWidths[]}  [borderWidth]
 * @property {string|string[]}                 [borderStyle]
 * @property {Radii | Radii[] }                [borderRadius]
 * @property {Shadows | Shadows[]}             [boxShadow]
 * @property {Shadows | Shadows[]}             [textShadow]
 * @property {number | number[]}               [zIndex]
 * @property {Sizes | Sizes[]}                 [width]
 * @property {Sizes | Sizes[]}                 [minWidth]
 * @property {Sizes | Sizes[]}                 [maxWidth]
 * @property {Sizes | Sizes[]}                 [height]
 * @property {Sizes | Sizes[]}                 [minHeight]
 * @property {Sizes | Sizes[]}                 [maxHeight]
 * @property {Sizes | Sizes[]}                 [size]
 */
/**
 * @typedef {Omit<CSSProperties, keyof ThemableStyle>} StandardCSSProperties All standard CSS properties as regular object, except those from ThemableStyle
 */
/**
 * Helper get CSS from theme-aware style object and theme
 * @param {ThemableStyle | StandardCSSProperties} styles
 * @return {import('styled-system__css').CSSObject}
 */
export default function sx(styles?: ThemableStyle | StandardCSSProperties): import('styled-system__css').CSSObject;
export type CSSProperties = import('styled-system__css').CSSProperties;
export type SystemStyleObject = import('styled-system__css').SystemStyleObject;
export type Colors = keyof {
    readonly borders: {
        none: string;
        sm: string;
    };
    readonly borderStyles: {
        none: string;
        solid: string;
    };
    readonly borderWidths: {
        none: "0px";
        sm: "1px";
        md: "2px";
        lg: "3px";
        xl: "4px";
        0: "0px";
        1: "1px";
        2: "2px";
        3: "3px";
        4: "4px";
        length: 5;
        toString(): string;
        toLocaleString(): string;
        pop(): "0px" | "2px" | "4px" | "1px" | "3px";
        push(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        concat(...items: ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        concat(...items: ("0px" | "2px" | "4px" | "1px" | "3px" | ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">)[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        join(separator?: string): string;
        reverse(): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        shift(): "0px" | "2px" | "4px" | "1px" | "3px";
        slice(start?: number, end?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        sort(compareFn?: (a: "0px" | "2px" | "4px" | "1px" | "3px", b: "0px" | "2px" | "4px" | "1px" | "3px") => number): ["0px", "1px", "2px", "3px", "4px"];
        splice(start: number, deleteCount?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        splice(start: number, deleteCount: number, ...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        unshift(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        indexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        lastIndexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        every<S extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U, thisArg?: any): U[];
        filter<S_1 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (this: void, value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): "0px" | "2px" | "4px" | "1px" | "3px";
        findIndex(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): number;
        fill(value: "0px" | "2px" | "4px" | "1px" | "3px", start?: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        copyWithin(target: number, start: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        entries(): IterableIterator<[number, "0px" | "2px" | "4px" | "1px" | "3px"]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        includes(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly breakpoints: {
        0: "576px";
        1: "768px";
        2: "992px";
        3: "1200px";
        4: "1400px";
        sm: "576px";
        md: "768px";
        lg: "992px";
        xl: "1200px";
        xxl: "1400px";
    };
    readonly colors: {
        text: "#222222";
        textLighter: "#9B9B9B";
        link: "#38699F";
        linkHover: "#598DC5";
        linkActive: "#2A5079";
        border: "#CACACA";
        line: "#E8E8E8";
        background: "#F4F4F4";
        highlight: "#FFF4D6";
        muted: "#CACACA";
        primary: "#FFBA00";
        primaryDark: "#CC9600";
        primaryLight: "#FFCE47";
        primaryBG: "#FFF4D6";
        primaryBGLight: "#FFF9EA";
        secondary: "#589F39";
        secondaryDark: "#42782B";
        secondaryLight: "#7AC45A";
        secondaryBG: "#E4F1DE";
        secondaryBGLight: "#F1F8EE";
        accent: "#FE9900";
        accentDark: "#CC7A00";
        accentLight: "#FFB647";
        accentBG: "#FFEFD6";
        accentBGLight: "#FFF7EA";
        neutral: "#CACACA";
        neutralDark: "#9B9B9B";
        neutralLight: "#E8E8E8";
        neutralBG: "#F4F4F4";
        neutralBGLight: "#F8F8F8";
        critical: "#D0021B";
        criticalDark: "#A20214";
        criticalLight: "#FD213B";
        criticalBG: "#FFD7DB";
        criticalBGLight: "#FFEFF1";
        info: "#4A90E2";
        infoDark: "#2275D3";
        infoLight: "#84B4EB";
        infoBG: "#E0EFFF";
        infoBGLight: "#EFF6FF";
        positive: "#589F39";
        positiveDark: "#42782B";
        positiveLight: "#7AC45A";
        positiveBG: "#E4F1DE";
        positiveBGLight: "#F1F8EE";
        caution: "#FFBA00";
        cautionDark: "#CC9600";
        cautionLight: "#FFCE47";
        cautionBG: "#FFF4D6";
        cautionBGLight: "#FFF9EA";
        blue1: "#2275D3";
        blue2: "#4A90E2";
        blue3: "#84B4EB";
        blue4: "#E0EFFF";
        blue5: "#EFF6FF";
        darkblue1: "#2A5079";
        darkblue2: "#38699F";
        darkblue3: "#598DC5";
        darkblue4: "#E1EAF4";
        teal1: "#005C66";
        teal2: "#0094A3";
        teal3: "#00CAE0";
        teal4: "#E1F5F7";
        green1: "#42782B";
        green2: "#589F39";
        green3: "#7AC45A";
        green4: "#E4F1DE";
        green5: "#F1F8EE";
        yellow1: "#CC9600";
        yellow2: "#FFBA00";
        yellow3: "#FFCE47";
        yellow4: "#FFF4D6";
        yellow5: "#FFF9EA";
        orange1: "#CC7A00";
        orange2: "#FE9900";
        orange3: "#FFB647";
        orange4: "#FFEFD6";
        orange5: "#FFF7EA";
        red1: "#A20214";
        red2: "#D0021B";
        red3: "#FD213B";
        red4: "#FFD7DB";
        red5: "#FFEFF1";
        black: "#222222";
        darkgray1: "";
        darkgray2: "";
        darkgray3: "#777777";
        darkgray4: "";
        gray1: "#9B9B9B";
        gray2: "#CACACA";
        gray3: "#E8E8E8";
        gray4: "#F4F4F4";
        gray5: "#F8F8F8";
        white: "#FFFFFF";
    };
    readonly durations: {
        xxxs: 100;
        xxs: 150;
        xs: 300;
        sm: 500;
        md: 1000;
        lg: 2000;
        xl: 4000;
        xxl: 6000;
        xxxl: 8000;
        xxxxl: 10000;
    };
    readonly fonts: {
        body: string;
        heading: string;
        monospace: string;
        urls: {
            body: string;
        };
    };
    readonly fontSizes: {
        h1: "32px";
        h2: "24px";
        h3: "20px";
        h4: "18px";
        h5: "16px";
        h6: "14px";
        body: "14px";
        xxs: "10px";
        xs: "12px";
        sm: "14px";
        md: "16px";
        lg: "18px";
        xl: "20px";
        xxl: "24px";
        xxxl: "32px";
    };
    readonly fontWeights: {
        body: 400;
        heading: 700;
        normal: 400;
        bold: 700;
    };
    readonly gradients: {
        toDark: "linear-gradient(180deg, rgba(0, 0, 0, 0.00) 3%, #101426 100%)";
        toLight: "linear-gradient(0deg, #FFFFFF 0%, rgba(255, 255, 255, 0.00) 100%)";
    };
    readonly letterSpacings: any[];
    readonly lineHeights: {
        xs: 1;
        sm: 1.25;
        md: 1.5;
        lg: 1.75;
        xl: 2;
        xxl: 2.5;
        0: 1;
        1: 1.25;
        2: 1.5;
        3: 1.75;
        4: 2;
        5: 2.5;
        length: 6;
        toString(): string;
        toLocaleString(): string;
        pop(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        push(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        concat(...items: ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        concat(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75 | ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        join(separator?: string): string;
        reverse(): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        shift(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        slice(start?: number, end?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        sort(compareFn?: (a: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, b: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75) => number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        splice(start: number, deleteCount?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        splice(start: number, deleteCount: number, ...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        unshift(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        indexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        lastIndexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        every<S_3 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_3, thisArg?: any): this is S_3[];
        every(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => void, thisArg?: any): void;
        map<U_3>(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_3, thisArg?: any): U_3[];
        filter<S_4 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_4, thisArg?: any): S_4[];
        filter(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce<U_4>(callbackfn: (previousValue: U_4, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_4, initialValue: U_4): U_4;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight<U_5>(callbackfn: (previousValue: U_5, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_5, initialValue: U_5): U_5;
        find<S_5 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (this: void, value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_5, thisArg?: any): S_5;
        find(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        findIndex(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): number;
        fill(value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, start?: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        copyWithin(target: number, start: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        entries(): IterableIterator<[number, 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        includes(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly mediaQueries: {
        ip5: string;
        tablet: string;
        desktop: string;
    };
    readonly radii: {
        none: "0";
        xs: "2px";
        sm: "4px";
        md: "8px";
        lg: "14px";
        xl: "20px";
        pill: string;
        circle: string;
    };
    readonly shadows: {
        none: "none";
        sm: "0px 2px 4px rgba(0,0,0,.5)";
        md: "0px 0px 8px rgba(0,0,0,.3)";
        lg: "2px 2px 14px rgba(0,0,0,.3)";
    };
    readonly sizes: {
        xxxs: "12px";
        xxs: "16px";
        xs: "20px";
        sm: "24px";
        md: "28px";
        lg: "32px";
        xl: "48px";
        xxl: "64px";
        xxxl: "80px";
        xxxxl: "96px";
        xxxxxl: "128px";
        buttonMaxWidth: "352px";
        $sm: "236px";
        $md: "480px";
        $lg: "636px";
        $xl: "864px";
        vW: "100vw";
        vH: "100vh";
        quarter: "25%";
        third: "33.33%";
        half: "50%";
        twoThird: "66.66%";
        threeQuarter: "75%";
        full: "100%";
    };
    readonly space: {
        none: "0px";
        xxxs: "2px";
        xxs: "4px";
        xs: "8px";
        sm: "12px";
        md: "16px";
        lg: "24px";
        xl: "32px";
        xxl: "48px";
        xxxl: "64px";
        xxxxl: "96px";
        xxxxxl: "128px";
    };
    readonly zIndices: {
        initial: "auto";
        neutral: 0;
        up: 1;
        down: -1;
        notification: 1900;
        tooltip: 1800;
        modal: 1700;
        dropdown: 1600;
    };
}['colors'];
export type Fonts = keyof {
    readonly borders: {
        none: string;
        sm: string;
    };
    readonly borderStyles: {
        none: string;
        solid: string;
    };
    readonly borderWidths: {
        none: "0px";
        sm: "1px";
        md: "2px";
        lg: "3px";
        xl: "4px";
        0: "0px";
        1: "1px";
        2: "2px";
        3: "3px";
        4: "4px";
        length: 5;
        toString(): string;
        toLocaleString(): string;
        pop(): "0px" | "2px" | "4px" | "1px" | "3px";
        push(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        concat(...items: ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        concat(...items: ("0px" | "2px" | "4px" | "1px" | "3px" | ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">)[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        join(separator?: string): string;
        reverse(): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        shift(): "0px" | "2px" | "4px" | "1px" | "3px";
        slice(start?: number, end?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        sort(compareFn?: (a: "0px" | "2px" | "4px" | "1px" | "3px", b: "0px" | "2px" | "4px" | "1px" | "3px") => number): ["0px", "1px", "2px", "3px", "4px"];
        splice(start: number, deleteCount?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        splice(start: number, deleteCount: number, ...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        unshift(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        indexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        lastIndexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        every<S extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U, thisArg?: any): U[];
        filter<S_1 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (this: void, value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): "0px" | "2px" | "4px" | "1px" | "3px";
        findIndex(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): number;
        fill(value: "0px" | "2px" | "4px" | "1px" | "3px", start?: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        copyWithin(target: number, start: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        entries(): IterableIterator<[number, "0px" | "2px" | "4px" | "1px" | "3px"]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        includes(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly breakpoints: {
        0: "576px";
        1: "768px";
        2: "992px";
        3: "1200px";
        4: "1400px";
        sm: "576px";
        md: "768px";
        lg: "992px";
        xl: "1200px";
        xxl: "1400px";
    };
    readonly colors: {
        text: "#222222";
        textLighter: "#9B9B9B";
        link: "#38699F";
        linkHover: "#598DC5";
        linkActive: "#2A5079";
        border: "#CACACA";
        line: "#E8E8E8";
        background: "#F4F4F4";
        highlight: "#FFF4D6";
        muted: "#CACACA";
        primary: "#FFBA00";
        primaryDark: "#CC9600";
        primaryLight: "#FFCE47";
        primaryBG: "#FFF4D6";
        primaryBGLight: "#FFF9EA";
        secondary: "#589F39";
        secondaryDark: "#42782B";
        secondaryLight: "#7AC45A";
        secondaryBG: "#E4F1DE";
        secondaryBGLight: "#F1F8EE";
        accent: "#FE9900";
        accentDark: "#CC7A00";
        accentLight: "#FFB647";
        accentBG: "#FFEFD6";
        accentBGLight: "#FFF7EA";
        neutral: "#CACACA";
        neutralDark: "#9B9B9B";
        neutralLight: "#E8E8E8";
        neutralBG: "#F4F4F4";
        neutralBGLight: "#F8F8F8";
        critical: "#D0021B";
        criticalDark: "#A20214";
        criticalLight: "#FD213B";
        criticalBG: "#FFD7DB";
        criticalBGLight: "#FFEFF1";
        info: "#4A90E2";
        infoDark: "#2275D3";
        infoLight: "#84B4EB";
        infoBG: "#E0EFFF";
        infoBGLight: "#EFF6FF";
        positive: "#589F39";
        positiveDark: "#42782B";
        positiveLight: "#7AC45A";
        positiveBG: "#E4F1DE";
        positiveBGLight: "#F1F8EE";
        caution: "#FFBA00";
        cautionDark: "#CC9600";
        cautionLight: "#FFCE47";
        cautionBG: "#FFF4D6";
        cautionBGLight: "#FFF9EA";
        blue1: "#2275D3";
        blue2: "#4A90E2";
        blue3: "#84B4EB";
        blue4: "#E0EFFF";
        blue5: "#EFF6FF";
        darkblue1: "#2A5079";
        darkblue2: "#38699F";
        darkblue3: "#598DC5";
        darkblue4: "#E1EAF4";
        teal1: "#005C66";
        teal2: "#0094A3";
        teal3: "#00CAE0";
        teal4: "#E1F5F7";
        green1: "#42782B";
        green2: "#589F39";
        green3: "#7AC45A";
        green4: "#E4F1DE";
        green5: "#F1F8EE";
        yellow1: "#CC9600";
        yellow2: "#FFBA00";
        yellow3: "#FFCE47";
        yellow4: "#FFF4D6";
        yellow5: "#FFF9EA";
        orange1: "#CC7A00";
        orange2: "#FE9900";
        orange3: "#FFB647";
        orange4: "#FFEFD6";
        orange5: "#FFF7EA";
        red1: "#A20214";
        red2: "#D0021B";
        red3: "#FD213B";
        red4: "#FFD7DB";
        red5: "#FFEFF1";
        black: "#222222";
        darkgray1: "";
        darkgray2: "";
        darkgray3: "#777777";
        darkgray4: "";
        gray1: "#9B9B9B";
        gray2: "#CACACA";
        gray3: "#E8E8E8";
        gray4: "#F4F4F4";
        gray5: "#F8F8F8";
        white: "#FFFFFF";
    };
    readonly durations: {
        xxxs: 100;
        xxs: 150;
        xs: 300;
        sm: 500;
        md: 1000;
        lg: 2000;
        xl: 4000;
        xxl: 6000;
        xxxl: 8000;
        xxxxl: 10000;
    };
    readonly fonts: {
        body: string;
        heading: string;
        monospace: string;
        urls: {
            body: string;
        };
    };
    readonly fontSizes: {
        h1: "32px";
        h2: "24px";
        h3: "20px";
        h4: "18px";
        h5: "16px";
        h6: "14px";
        body: "14px";
        xxs: "10px";
        xs: "12px";
        sm: "14px";
        md: "16px";
        lg: "18px";
        xl: "20px";
        xxl: "24px";
        xxxl: "32px";
    };
    readonly fontWeights: {
        body: 400;
        heading: 700;
        normal: 400;
        bold: 700;
    };
    readonly gradients: {
        toDark: "linear-gradient(180deg, rgba(0, 0, 0, 0.00) 3%, #101426 100%)";
        toLight: "linear-gradient(0deg, #FFFFFF 0%, rgba(255, 255, 255, 0.00) 100%)";
    };
    readonly letterSpacings: any[];
    readonly lineHeights: {
        xs: 1;
        sm: 1.25;
        md: 1.5;
        lg: 1.75;
        xl: 2;
        xxl: 2.5;
        0: 1;
        1: 1.25;
        2: 1.5;
        3: 1.75;
        4: 2;
        5: 2.5;
        length: 6;
        toString(): string;
        toLocaleString(): string;
        pop(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        push(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        concat(...items: ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        concat(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75 | ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        join(separator?: string): string;
        reverse(): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        shift(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        slice(start?: number, end?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        sort(compareFn?: (a: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, b: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75) => number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        splice(start: number, deleteCount?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        splice(start: number, deleteCount: number, ...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        unshift(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        indexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        lastIndexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        every<S_3 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_3, thisArg?: any): this is S_3[];
        every(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => void, thisArg?: any): void;
        map<U_3>(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_3, thisArg?: any): U_3[];
        filter<S_4 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_4, thisArg?: any): S_4[];
        filter(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce<U_4>(callbackfn: (previousValue: U_4, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_4, initialValue: U_4): U_4;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight<U_5>(callbackfn: (previousValue: U_5, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_5, initialValue: U_5): U_5;
        find<S_5 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (this: void, value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_5, thisArg?: any): S_5;
        find(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        findIndex(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): number;
        fill(value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, start?: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        copyWithin(target: number, start: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        entries(): IterableIterator<[number, 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        includes(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly mediaQueries: {
        ip5: string;
        tablet: string;
        desktop: string;
    };
    readonly radii: {
        none: "0";
        xs: "2px";
        sm: "4px";
        md: "8px";
        lg: "14px";
        xl: "20px";
        pill: string;
        circle: string;
    };
    readonly shadows: {
        none: "none";
        sm: "0px 2px 4px rgba(0,0,0,.5)";
        md: "0px 0px 8px rgba(0,0,0,.3)";
        lg: "2px 2px 14px rgba(0,0,0,.3)";
    };
    readonly sizes: {
        xxxs: "12px";
        xxs: "16px";
        xs: "20px";
        sm: "24px";
        md: "28px";
        lg: "32px";
        xl: "48px";
        xxl: "64px";
        xxxl: "80px";
        xxxxl: "96px";
        xxxxxl: "128px";
        buttonMaxWidth: "352px";
        $sm: "236px";
        $md: "480px";
        $lg: "636px";
        $xl: "864px";
        vW: "100vw";
        vH: "100vh";
        quarter: "25%";
        third: "33.33%";
        half: "50%";
        twoThird: "66.66%";
        threeQuarter: "75%";
        full: "100%";
    };
    readonly space: {
        none: "0px";
        xxxs: "2px";
        xxs: "4px";
        xs: "8px";
        sm: "12px";
        md: "16px";
        lg: "24px";
        xl: "32px";
        xxl: "48px";
        xxxl: "64px";
        xxxxl: "96px";
        xxxxxl: "128px";
    };
    readonly zIndices: {
        initial: "auto";
        neutral: 0;
        up: 1;
        down: -1;
        notification: 1900;
        tooltip: 1800;
        modal: 1700;
        dropdown: 1600;
    };
}['fonts'];
export type FontWeights = keyof {
    readonly borders: {
        none: string;
        sm: string;
    };
    readonly borderStyles: {
        none: string;
        solid: string;
    };
    readonly borderWidths: {
        none: "0px";
        sm: "1px";
        md: "2px";
        lg: "3px";
        xl: "4px";
        0: "0px";
        1: "1px";
        2: "2px";
        3: "3px";
        4: "4px";
        length: 5;
        toString(): string;
        toLocaleString(): string;
        pop(): "0px" | "2px" | "4px" | "1px" | "3px";
        push(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        concat(...items: ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        concat(...items: ("0px" | "2px" | "4px" | "1px" | "3px" | ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">)[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        join(separator?: string): string;
        reverse(): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        shift(): "0px" | "2px" | "4px" | "1px" | "3px";
        slice(start?: number, end?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        sort(compareFn?: (a: "0px" | "2px" | "4px" | "1px" | "3px", b: "0px" | "2px" | "4px" | "1px" | "3px") => number): ["0px", "1px", "2px", "3px", "4px"];
        splice(start: number, deleteCount?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        splice(start: number, deleteCount: number, ...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        unshift(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        indexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        lastIndexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        every<S extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U, thisArg?: any): U[];
        filter<S_1 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (this: void, value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): "0px" | "2px" | "4px" | "1px" | "3px";
        findIndex(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): number;
        fill(value: "0px" | "2px" | "4px" | "1px" | "3px", start?: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        copyWithin(target: number, start: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        entries(): IterableIterator<[number, "0px" | "2px" | "4px" | "1px" | "3px"]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        includes(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly breakpoints: {
        0: "576px";
        1: "768px";
        2: "992px";
        3: "1200px";
        4: "1400px";
        sm: "576px";
        md: "768px";
        lg: "992px";
        xl: "1200px";
        xxl: "1400px";
    };
    readonly colors: {
        text: "#222222";
        textLighter: "#9B9B9B";
        link: "#38699F";
        linkHover: "#598DC5";
        linkActive: "#2A5079";
        border: "#CACACA";
        line: "#E8E8E8";
        background: "#F4F4F4";
        highlight: "#FFF4D6";
        muted: "#CACACA";
        primary: "#FFBA00";
        primaryDark: "#CC9600";
        primaryLight: "#FFCE47";
        primaryBG: "#FFF4D6";
        primaryBGLight: "#FFF9EA";
        secondary: "#589F39";
        secondaryDark: "#42782B";
        secondaryLight: "#7AC45A";
        secondaryBG: "#E4F1DE";
        secondaryBGLight: "#F1F8EE";
        accent: "#FE9900";
        accentDark: "#CC7A00";
        accentLight: "#FFB647";
        accentBG: "#FFEFD6";
        accentBGLight: "#FFF7EA";
        neutral: "#CACACA";
        neutralDark: "#9B9B9B";
        neutralLight: "#E8E8E8";
        neutralBG: "#F4F4F4";
        neutralBGLight: "#F8F8F8";
        critical: "#D0021B";
        criticalDark: "#A20214";
        criticalLight: "#FD213B";
        criticalBG: "#FFD7DB";
        criticalBGLight: "#FFEFF1";
        info: "#4A90E2";
        infoDark: "#2275D3";
        infoLight: "#84B4EB";
        infoBG: "#E0EFFF";
        infoBGLight: "#EFF6FF";
        positive: "#589F39";
        positiveDark: "#42782B";
        positiveLight: "#7AC45A";
        positiveBG: "#E4F1DE";
        positiveBGLight: "#F1F8EE";
        caution: "#FFBA00";
        cautionDark: "#CC9600";
        cautionLight: "#FFCE47";
        cautionBG: "#FFF4D6";
        cautionBGLight: "#FFF9EA";
        blue1: "#2275D3";
        blue2: "#4A90E2";
        blue3: "#84B4EB";
        blue4: "#E0EFFF";
        blue5: "#EFF6FF";
        darkblue1: "#2A5079";
        darkblue2: "#38699F";
        darkblue3: "#598DC5";
        darkblue4: "#E1EAF4";
        teal1: "#005C66";
        teal2: "#0094A3";
        teal3: "#00CAE0";
        teal4: "#E1F5F7";
        green1: "#42782B";
        green2: "#589F39";
        green3: "#7AC45A";
        green4: "#E4F1DE";
        green5: "#F1F8EE";
        yellow1: "#CC9600";
        yellow2: "#FFBA00";
        yellow3: "#FFCE47";
        yellow4: "#FFF4D6";
        yellow5: "#FFF9EA";
        orange1: "#CC7A00";
        orange2: "#FE9900";
        orange3: "#FFB647";
        orange4: "#FFEFD6";
        orange5: "#FFF7EA";
        red1: "#A20214";
        red2: "#D0021B";
        red3: "#FD213B";
        red4: "#FFD7DB";
        red5: "#FFEFF1";
        black: "#222222";
        darkgray1: "";
        darkgray2: "";
        darkgray3: "#777777";
        darkgray4: "";
        gray1: "#9B9B9B";
        gray2: "#CACACA";
        gray3: "#E8E8E8";
        gray4: "#F4F4F4";
        gray5: "#F8F8F8";
        white: "#FFFFFF";
    };
    readonly durations: {
        xxxs: 100;
        xxs: 150;
        xs: 300;
        sm: 500;
        md: 1000;
        lg: 2000;
        xl: 4000;
        xxl: 6000;
        xxxl: 8000;
        xxxxl: 10000;
    };
    readonly fonts: {
        body: string;
        heading: string;
        monospace: string;
        urls: {
            body: string;
        };
    };
    readonly fontSizes: {
        h1: "32px";
        h2: "24px";
        h3: "20px";
        h4: "18px";
        h5: "16px";
        h6: "14px";
        body: "14px";
        xxs: "10px";
        xs: "12px";
        sm: "14px";
        md: "16px";
        lg: "18px";
        xl: "20px";
        xxl: "24px";
        xxxl: "32px";
    };
    readonly fontWeights: {
        body: 400;
        heading: 700;
        normal: 400;
        bold: 700;
    };
    readonly gradients: {
        toDark: "linear-gradient(180deg, rgba(0, 0, 0, 0.00) 3%, #101426 100%)";
        toLight: "linear-gradient(0deg, #FFFFFF 0%, rgba(255, 255, 255, 0.00) 100%)";
    };
    readonly letterSpacings: any[];
    readonly lineHeights: {
        xs: 1;
        sm: 1.25;
        md: 1.5;
        lg: 1.75;
        xl: 2;
        xxl: 2.5;
        0: 1;
        1: 1.25;
        2: 1.5;
        3: 1.75;
        4: 2;
        5: 2.5;
        length: 6;
        toString(): string;
        toLocaleString(): string;
        pop(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        push(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        concat(...items: ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        concat(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75 | ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        join(separator?: string): string;
        reverse(): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        shift(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        slice(start?: number, end?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        sort(compareFn?: (a: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, b: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75) => number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        splice(start: number, deleteCount?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        splice(start: number, deleteCount: number, ...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        unshift(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        indexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        lastIndexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        every<S_3 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_3, thisArg?: any): this is S_3[];
        every(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => void, thisArg?: any): void;
        map<U_3>(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_3, thisArg?: any): U_3[];
        filter<S_4 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_4, thisArg?: any): S_4[];
        filter(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce<U_4>(callbackfn: (previousValue: U_4, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_4, initialValue: U_4): U_4;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight<U_5>(callbackfn: (previousValue: U_5, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_5, initialValue: U_5): U_5;
        find<S_5 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (this: void, value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_5, thisArg?: any): S_5;
        find(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        findIndex(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): number;
        fill(value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, start?: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        copyWithin(target: number, start: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        entries(): IterableIterator<[number, 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        includes(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly mediaQueries: {
        ip5: string;
        tablet: string;
        desktop: string;
    };
    readonly radii: {
        none: "0";
        xs: "2px";
        sm: "4px";
        md: "8px";
        lg: "14px";
        xl: "20px";
        pill: string;
        circle: string;
    };
    readonly shadows: {
        none: "none";
        sm: "0px 2px 4px rgba(0,0,0,.5)";
        md: "0px 0px 8px rgba(0,0,0,.3)";
        lg: "2px 2px 14px rgba(0,0,0,.3)";
    };
    readonly sizes: {
        xxxs: "12px";
        xxs: "16px";
        xs: "20px";
        sm: "24px";
        md: "28px";
        lg: "32px";
        xl: "48px";
        xxl: "64px";
        xxxl: "80px";
        xxxxl: "96px";
        xxxxxl: "128px";
        buttonMaxWidth: "352px";
        $sm: "236px";
        $md: "480px";
        $lg: "636px";
        $xl: "864px";
        vW: "100vw";
        vH: "100vh";
        quarter: "25%";
        third: "33.33%";
        half: "50%";
        twoThird: "66.66%";
        threeQuarter: "75%";
        full: "100%";
    };
    readonly space: {
        none: "0px";
        xxxs: "2px";
        xxs: "4px";
        xs: "8px";
        sm: "12px";
        md: "16px";
        lg: "24px";
        xl: "32px";
        xxl: "48px";
        xxxl: "64px";
        xxxxl: "96px";
        xxxxxl: "128px";
    };
    readonly zIndices: {
        initial: "auto";
        neutral: 0;
        up: 1;
        down: -1;
        notification: 1900;
        tooltip: 1800;
        modal: 1700;
        dropdown: 1600;
    };
}['fontWeights'];
export type Gradients = keyof {
    readonly borders: {
        none: string;
        sm: string;
    };
    readonly borderStyles: {
        none: string;
        solid: string;
    };
    readonly borderWidths: {
        none: "0px";
        sm: "1px";
        md: "2px";
        lg: "3px";
        xl: "4px";
        0: "0px";
        1: "1px";
        2: "2px";
        3: "3px";
        4: "4px";
        length: 5;
        toString(): string;
        toLocaleString(): string;
        pop(): "0px" | "2px" | "4px" | "1px" | "3px";
        push(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        concat(...items: ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        concat(...items: ("0px" | "2px" | "4px" | "1px" | "3px" | ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">)[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        join(separator?: string): string;
        reverse(): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        shift(): "0px" | "2px" | "4px" | "1px" | "3px";
        slice(start?: number, end?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        sort(compareFn?: (a: "0px" | "2px" | "4px" | "1px" | "3px", b: "0px" | "2px" | "4px" | "1px" | "3px") => number): ["0px", "1px", "2px", "3px", "4px"];
        splice(start: number, deleteCount?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        splice(start: number, deleteCount: number, ...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        unshift(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        indexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        lastIndexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        every<S extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U, thisArg?: any): U[];
        filter<S_1 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (this: void, value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): "0px" | "2px" | "4px" | "1px" | "3px";
        findIndex(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): number;
        fill(value: "0px" | "2px" | "4px" | "1px" | "3px", start?: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        copyWithin(target: number, start: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        entries(): IterableIterator<[number, "0px" | "2px" | "4px" | "1px" | "3px"]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        includes(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly breakpoints: {
        0: "576px";
        1: "768px";
        2: "992px";
        3: "1200px";
        4: "1400px";
        sm: "576px";
        md: "768px";
        lg: "992px";
        xl: "1200px";
        xxl: "1400px";
    };
    readonly colors: {
        text: "#222222";
        textLighter: "#9B9B9B";
        link: "#38699F";
        linkHover: "#598DC5";
        linkActive: "#2A5079";
        border: "#CACACA";
        line: "#E8E8E8";
        background: "#F4F4F4";
        highlight: "#FFF4D6";
        muted: "#CACACA";
        primary: "#FFBA00";
        primaryDark: "#CC9600";
        primaryLight: "#FFCE47";
        primaryBG: "#FFF4D6";
        primaryBGLight: "#FFF9EA";
        secondary: "#589F39";
        secondaryDark: "#42782B";
        secondaryLight: "#7AC45A";
        secondaryBG: "#E4F1DE";
        secondaryBGLight: "#F1F8EE";
        accent: "#FE9900";
        accentDark: "#CC7A00";
        accentLight: "#FFB647";
        accentBG: "#FFEFD6";
        accentBGLight: "#FFF7EA";
        neutral: "#CACACA";
        neutralDark: "#9B9B9B";
        neutralLight: "#E8E8E8";
        neutralBG: "#F4F4F4";
        neutralBGLight: "#F8F8F8";
        critical: "#D0021B";
        criticalDark: "#A20214";
        criticalLight: "#FD213B";
        criticalBG: "#FFD7DB";
        criticalBGLight: "#FFEFF1";
        info: "#4A90E2";
        infoDark: "#2275D3";
        infoLight: "#84B4EB";
        infoBG: "#E0EFFF";
        infoBGLight: "#EFF6FF";
        positive: "#589F39";
        positiveDark: "#42782B";
        positiveLight: "#7AC45A";
        positiveBG: "#E4F1DE";
        positiveBGLight: "#F1F8EE";
        caution: "#FFBA00";
        cautionDark: "#CC9600";
        cautionLight: "#FFCE47";
        cautionBG: "#FFF4D6";
        cautionBGLight: "#FFF9EA";
        blue1: "#2275D3";
        blue2: "#4A90E2";
        blue3: "#84B4EB";
        blue4: "#E0EFFF";
        blue5: "#EFF6FF";
        darkblue1: "#2A5079";
        darkblue2: "#38699F";
        darkblue3: "#598DC5";
        darkblue4: "#E1EAF4";
        teal1: "#005C66";
        teal2: "#0094A3";
        teal3: "#00CAE0";
        teal4: "#E1F5F7";
        green1: "#42782B";
        green2: "#589F39";
        green3: "#7AC45A";
        green4: "#E4F1DE";
        green5: "#F1F8EE";
        yellow1: "#CC9600";
        yellow2: "#FFBA00";
        yellow3: "#FFCE47";
        yellow4: "#FFF4D6";
        yellow5: "#FFF9EA";
        orange1: "#CC7A00";
        orange2: "#FE9900";
        orange3: "#FFB647";
        orange4: "#FFEFD6";
        orange5: "#FFF7EA";
        red1: "#A20214";
        red2: "#D0021B";
        red3: "#FD213B";
        red4: "#FFD7DB";
        red5: "#FFEFF1";
        black: "#222222";
        darkgray1: "";
        darkgray2: "";
        darkgray3: "#777777";
        darkgray4: "";
        gray1: "#9B9B9B";
        gray2: "#CACACA";
        gray3: "#E8E8E8";
        gray4: "#F4F4F4";
        gray5: "#F8F8F8";
        white: "#FFFFFF";
    };
    readonly durations: {
        xxxs: 100;
        xxs: 150;
        xs: 300;
        sm: 500;
        md: 1000;
        lg: 2000;
        xl: 4000;
        xxl: 6000;
        xxxl: 8000;
        xxxxl: 10000;
    };
    readonly fonts: {
        body: string;
        heading: string;
        monospace: string;
        urls: {
            body: string;
        };
    };
    readonly fontSizes: {
        h1: "32px";
        h2: "24px";
        h3: "20px";
        h4: "18px";
        h5: "16px";
        h6: "14px";
        body: "14px";
        xxs: "10px";
        xs: "12px";
        sm: "14px";
        md: "16px";
        lg: "18px";
        xl: "20px";
        xxl: "24px";
        xxxl: "32px";
    };
    readonly fontWeights: {
        body: 400;
        heading: 700;
        normal: 400;
        bold: 700;
    };
    readonly gradients: {
        toDark: "linear-gradient(180deg, rgba(0, 0, 0, 0.00) 3%, #101426 100%)";
        toLight: "linear-gradient(0deg, #FFFFFF 0%, rgba(255, 255, 255, 0.00) 100%)";
    };
    readonly letterSpacings: any[];
    readonly lineHeights: {
        xs: 1;
        sm: 1.25;
        md: 1.5;
        lg: 1.75;
        xl: 2;
        xxl: 2.5;
        0: 1;
        1: 1.25;
        2: 1.5;
        3: 1.75;
        4: 2;
        5: 2.5;
        length: 6;
        toString(): string;
        toLocaleString(): string;
        pop(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        push(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        concat(...items: ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        concat(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75 | ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        join(separator?: string): string;
        reverse(): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        shift(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        slice(start?: number, end?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        sort(compareFn?: (a: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, b: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75) => number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        splice(start: number, deleteCount?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        splice(start: number, deleteCount: number, ...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        unshift(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        indexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        lastIndexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        every<S_3 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_3, thisArg?: any): this is S_3[];
        every(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => void, thisArg?: any): void;
        map<U_3>(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_3, thisArg?: any): U_3[];
        filter<S_4 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_4, thisArg?: any): S_4[];
        filter(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce<U_4>(callbackfn: (previousValue: U_4, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_4, initialValue: U_4): U_4;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight<U_5>(callbackfn: (previousValue: U_5, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_5, initialValue: U_5): U_5;
        find<S_5 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (this: void, value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_5, thisArg?: any): S_5;
        find(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        findIndex(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): number;
        fill(value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, start?: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        copyWithin(target: number, start: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        entries(): IterableIterator<[number, 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        includes(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly mediaQueries: {
        ip5: string;
        tablet: string;
        desktop: string;
    };
    readonly radii: {
        none: "0";
        xs: "2px";
        sm: "4px";
        md: "8px";
        lg: "14px";
        xl: "20px";
        pill: string;
        circle: string;
    };
    readonly shadows: {
        none: "none";
        sm: "0px 2px 4px rgba(0,0,0,.5)";
        md: "0px 0px 8px rgba(0,0,0,.3)";
        lg: "2px 2px 14px rgba(0,0,0,.3)";
    };
    readonly sizes: {
        xxxs: "12px";
        xxs: "16px";
        xs: "20px";
        sm: "24px";
        md: "28px";
        lg: "32px";
        xl: "48px";
        xxl: "64px";
        xxxl: "80px";
        xxxxl: "96px";
        xxxxxl: "128px";
        buttonMaxWidth: "352px";
        $sm: "236px";
        $md: "480px";
        $lg: "636px";
        $xl: "864px";
        vW: "100vw";
        vH: "100vh";
        quarter: "25%";
        third: "33.33%";
        half: "50%";
        twoThird: "66.66%";
        threeQuarter: "75%";
        full: "100%";
    };
    readonly space: {
        none: "0px";
        xxxs: "2px";
        xxs: "4px";
        xs: "8px";
        sm: "12px";
        md: "16px";
        lg: "24px";
        xl: "32px";
        xxl: "48px";
        xxxl: "64px";
        xxxxl: "96px";
        xxxxxl: "128px";
    };
    readonly zIndices: {
        initial: "auto";
        neutral: 0;
        up: 1;
        down: -1;
        notification: 1900;
        tooltip: 1800;
        modal: 1700;
        dropdown: 1600;
    };
}['gradients'];
export type Space = keyof {
    readonly borders: {
        none: string;
        sm: string;
    };
    readonly borderStyles: {
        none: string;
        solid: string;
    };
    readonly borderWidths: {
        none: "0px";
        sm: "1px";
        md: "2px";
        lg: "3px";
        xl: "4px";
        0: "0px";
        1: "1px";
        2: "2px";
        3: "3px";
        4: "4px";
        length: 5;
        toString(): string;
        toLocaleString(): string;
        pop(): "0px" | "2px" | "4px" | "1px" | "3px";
        push(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        concat(...items: ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        concat(...items: ("0px" | "2px" | "4px" | "1px" | "3px" | ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">)[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        join(separator?: string): string;
        reverse(): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        shift(): "0px" | "2px" | "4px" | "1px" | "3px";
        slice(start?: number, end?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        sort(compareFn?: (a: "0px" | "2px" | "4px" | "1px" | "3px", b: "0px" | "2px" | "4px" | "1px" | "3px") => number): ["0px", "1px", "2px", "3px", "4px"];
        splice(start: number, deleteCount?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        splice(start: number, deleteCount: number, ...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        unshift(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        indexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        lastIndexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        every<S extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U, thisArg?: any): U[];
        filter<S_1 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (this: void, value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): "0px" | "2px" | "4px" | "1px" | "3px";
        findIndex(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): number;
        fill(value: "0px" | "2px" | "4px" | "1px" | "3px", start?: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        copyWithin(target: number, start: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        entries(): IterableIterator<[number, "0px" | "2px" | "4px" | "1px" | "3px"]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        includes(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly breakpoints: {
        0: "576px";
        1: "768px";
        2: "992px";
        3: "1200px";
        4: "1400px";
        sm: "576px";
        md: "768px";
        lg: "992px";
        xl: "1200px";
        xxl: "1400px";
    };
    readonly colors: {
        text: "#222222";
        textLighter: "#9B9B9B";
        link: "#38699F";
        linkHover: "#598DC5";
        linkActive: "#2A5079";
        border: "#CACACA";
        line: "#E8E8E8";
        background: "#F4F4F4";
        highlight: "#FFF4D6";
        muted: "#CACACA";
        primary: "#FFBA00";
        primaryDark: "#CC9600";
        primaryLight: "#FFCE47";
        primaryBG: "#FFF4D6";
        primaryBGLight: "#FFF9EA";
        secondary: "#589F39";
        secondaryDark: "#42782B";
        secondaryLight: "#7AC45A";
        secondaryBG: "#E4F1DE";
        secondaryBGLight: "#F1F8EE";
        accent: "#FE9900";
        accentDark: "#CC7A00";
        accentLight: "#FFB647";
        accentBG: "#FFEFD6";
        accentBGLight: "#FFF7EA";
        neutral: "#CACACA";
        neutralDark: "#9B9B9B";
        neutralLight: "#E8E8E8";
        neutralBG: "#F4F4F4";
        neutralBGLight: "#F8F8F8";
        critical: "#D0021B";
        criticalDark: "#A20214";
        criticalLight: "#FD213B";
        criticalBG: "#FFD7DB";
        criticalBGLight: "#FFEFF1";
        info: "#4A90E2";
        infoDark: "#2275D3";
        infoLight: "#84B4EB";
        infoBG: "#E0EFFF";
        infoBGLight: "#EFF6FF";
        positive: "#589F39";
        positiveDark: "#42782B";
        positiveLight: "#7AC45A";
        positiveBG: "#E4F1DE";
        positiveBGLight: "#F1F8EE";
        caution: "#FFBA00";
        cautionDark: "#CC9600";
        cautionLight: "#FFCE47";
        cautionBG: "#FFF4D6";
        cautionBGLight: "#FFF9EA";
        blue1: "#2275D3";
        blue2: "#4A90E2";
        blue3: "#84B4EB";
        blue4: "#E0EFFF";
        blue5: "#EFF6FF";
        darkblue1: "#2A5079";
        darkblue2: "#38699F";
        darkblue3: "#598DC5";
        darkblue4: "#E1EAF4";
        teal1: "#005C66";
        teal2: "#0094A3";
        teal3: "#00CAE0";
        teal4: "#E1F5F7";
        green1: "#42782B";
        green2: "#589F39";
        green3: "#7AC45A";
        green4: "#E4F1DE";
        green5: "#F1F8EE";
        yellow1: "#CC9600";
        yellow2: "#FFBA00";
        yellow3: "#FFCE47";
        yellow4: "#FFF4D6";
        yellow5: "#FFF9EA";
        orange1: "#CC7A00";
        orange2: "#FE9900";
        orange3: "#FFB647";
        orange4: "#FFEFD6";
        orange5: "#FFF7EA";
        red1: "#A20214";
        red2: "#D0021B";
        red3: "#FD213B";
        red4: "#FFD7DB";
        red5: "#FFEFF1";
        black: "#222222";
        darkgray1: "";
        darkgray2: "";
        darkgray3: "#777777";
        darkgray4: "";
        gray1: "#9B9B9B";
        gray2: "#CACACA";
        gray3: "#E8E8E8";
        gray4: "#F4F4F4";
        gray5: "#F8F8F8";
        white: "#FFFFFF";
    };
    readonly durations: {
        xxxs: 100;
        xxs: 150;
        xs: 300;
        sm: 500;
        md: 1000;
        lg: 2000;
        xl: 4000;
        xxl: 6000;
        xxxl: 8000;
        xxxxl: 10000;
    };
    readonly fonts: {
        body: string;
        heading: string;
        monospace: string;
        urls: {
            body: string;
        };
    };
    readonly fontSizes: {
        h1: "32px";
        h2: "24px";
        h3: "20px";
        h4: "18px";
        h5: "16px";
        h6: "14px";
        body: "14px";
        xxs: "10px";
        xs: "12px";
        sm: "14px";
        md: "16px";
        lg: "18px";
        xl: "20px";
        xxl: "24px";
        xxxl: "32px";
    };
    readonly fontWeights: {
        body: 400;
        heading: 700;
        normal: 400;
        bold: 700;
    };
    readonly gradients: {
        toDark: "linear-gradient(180deg, rgba(0, 0, 0, 0.00) 3%, #101426 100%)";
        toLight: "linear-gradient(0deg, #FFFFFF 0%, rgba(255, 255, 255, 0.00) 100%)";
    };
    readonly letterSpacings: any[];
    readonly lineHeights: {
        xs: 1;
        sm: 1.25;
        md: 1.5;
        lg: 1.75;
        xl: 2;
        xxl: 2.5;
        0: 1;
        1: 1.25;
        2: 1.5;
        3: 1.75;
        4: 2;
        5: 2.5;
        length: 6;
        toString(): string;
        toLocaleString(): string;
        pop(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        push(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        concat(...items: ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        concat(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75 | ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        join(separator?: string): string;
        reverse(): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        shift(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        slice(start?: number, end?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        sort(compareFn?: (a: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, b: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75) => number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        splice(start: number, deleteCount?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        splice(start: number, deleteCount: number, ...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        unshift(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        indexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        lastIndexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        every<S_3 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_3, thisArg?: any): this is S_3[];
        every(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => void, thisArg?: any): void;
        map<U_3>(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_3, thisArg?: any): U_3[];
        filter<S_4 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_4, thisArg?: any): S_4[];
        filter(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce<U_4>(callbackfn: (previousValue: U_4, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_4, initialValue: U_4): U_4;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight<U_5>(callbackfn: (previousValue: U_5, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_5, initialValue: U_5): U_5;
        find<S_5 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (this: void, value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_5, thisArg?: any): S_5;
        find(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        findIndex(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): number;
        fill(value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, start?: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        copyWithin(target: number, start: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        entries(): IterableIterator<[number, 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        includes(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly mediaQueries: {
        ip5: string;
        tablet: string;
        desktop: string;
    };
    readonly radii: {
        none: "0";
        xs: "2px";
        sm: "4px";
        md: "8px";
        lg: "14px";
        xl: "20px";
        pill: string;
        circle: string;
    };
    readonly shadows: {
        none: "none";
        sm: "0px 2px 4px rgba(0,0,0,.5)";
        md: "0px 0px 8px rgba(0,0,0,.3)";
        lg: "2px 2px 14px rgba(0,0,0,.3)";
    };
    readonly sizes: {
        xxxs: "12px";
        xxs: "16px";
        xs: "20px";
        sm: "24px";
        md: "28px";
        lg: "32px";
        xl: "48px";
        xxl: "64px";
        xxxl: "80px";
        xxxxl: "96px";
        xxxxxl: "128px";
        buttonMaxWidth: "352px";
        $sm: "236px";
        $md: "480px";
        $lg: "636px";
        $xl: "864px";
        vW: "100vw";
        vH: "100vh";
        quarter: "25%";
        third: "33.33%";
        half: "50%";
        twoThird: "66.66%";
        threeQuarter: "75%";
        full: "100%";
    };
    readonly space: {
        none: "0px";
        xxxs: "2px";
        xxs: "4px";
        xs: "8px";
        sm: "12px";
        md: "16px";
        lg: "24px";
        xl: "32px";
        xxl: "48px";
        xxxl: "64px";
        xxxxl: "96px";
        xxxxxl: "128px";
    };
    readonly zIndices: {
        initial: "auto";
        neutral: 0;
        up: 1;
        down: -1;
        notification: 1900;
        tooltip: 1800;
        modal: 1700;
        dropdown: 1600;
    };
}['space'];
export type FontSizes = keyof {
    readonly borders: {
        none: string;
        sm: string;
    };
    readonly borderStyles: {
        none: string;
        solid: string;
    };
    readonly borderWidths: {
        none: "0px";
        sm: "1px";
        md: "2px";
        lg: "3px";
        xl: "4px";
        0: "0px";
        1: "1px";
        2: "2px";
        3: "3px";
        4: "4px";
        length: 5;
        toString(): string;
        toLocaleString(): string;
        pop(): "0px" | "2px" | "4px" | "1px" | "3px";
        push(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        concat(...items: ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        concat(...items: ("0px" | "2px" | "4px" | "1px" | "3px" | ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">)[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        join(separator?: string): string;
        reverse(): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        shift(): "0px" | "2px" | "4px" | "1px" | "3px";
        slice(start?: number, end?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        sort(compareFn?: (a: "0px" | "2px" | "4px" | "1px" | "3px", b: "0px" | "2px" | "4px" | "1px" | "3px") => number): ["0px", "1px", "2px", "3px", "4px"];
        splice(start: number, deleteCount?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        splice(start: number, deleteCount: number, ...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        unshift(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        indexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        lastIndexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        every<S extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U, thisArg?: any): U[];
        filter<S_1 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (this: void, value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): "0px" | "2px" | "4px" | "1px" | "3px";
        findIndex(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): number;
        fill(value: "0px" | "2px" | "4px" | "1px" | "3px", start?: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        copyWithin(target: number, start: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        entries(): IterableIterator<[number, "0px" | "2px" | "4px" | "1px" | "3px"]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        includes(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly breakpoints: {
        0: "576px";
        1: "768px";
        2: "992px";
        3: "1200px";
        4: "1400px";
        sm: "576px";
        md: "768px";
        lg: "992px";
        xl: "1200px";
        xxl: "1400px";
    };
    readonly colors: {
        text: "#222222";
        textLighter: "#9B9B9B";
        link: "#38699F";
        linkHover: "#598DC5";
        linkActive: "#2A5079";
        border: "#CACACA";
        line: "#E8E8E8";
        background: "#F4F4F4";
        highlight: "#FFF4D6";
        muted: "#CACACA";
        primary: "#FFBA00";
        primaryDark: "#CC9600";
        primaryLight: "#FFCE47";
        primaryBG: "#FFF4D6";
        primaryBGLight: "#FFF9EA";
        secondary: "#589F39";
        secondaryDark: "#42782B";
        secondaryLight: "#7AC45A";
        secondaryBG: "#E4F1DE";
        secondaryBGLight: "#F1F8EE";
        accent: "#FE9900";
        accentDark: "#CC7A00";
        accentLight: "#FFB647";
        accentBG: "#FFEFD6";
        accentBGLight: "#FFF7EA";
        neutral: "#CACACA";
        neutralDark: "#9B9B9B";
        neutralLight: "#E8E8E8";
        neutralBG: "#F4F4F4";
        neutralBGLight: "#F8F8F8";
        critical: "#D0021B";
        criticalDark: "#A20214";
        criticalLight: "#FD213B";
        criticalBG: "#FFD7DB";
        criticalBGLight: "#FFEFF1";
        info: "#4A90E2";
        infoDark: "#2275D3";
        infoLight: "#84B4EB";
        infoBG: "#E0EFFF";
        infoBGLight: "#EFF6FF";
        positive: "#589F39";
        positiveDark: "#42782B";
        positiveLight: "#7AC45A";
        positiveBG: "#E4F1DE";
        positiveBGLight: "#F1F8EE";
        caution: "#FFBA00";
        cautionDark: "#CC9600";
        cautionLight: "#FFCE47";
        cautionBG: "#FFF4D6";
        cautionBGLight: "#FFF9EA";
        blue1: "#2275D3";
        blue2: "#4A90E2";
        blue3: "#84B4EB";
        blue4: "#E0EFFF";
        blue5: "#EFF6FF";
        darkblue1: "#2A5079";
        darkblue2: "#38699F";
        darkblue3: "#598DC5";
        darkblue4: "#E1EAF4";
        teal1: "#005C66";
        teal2: "#0094A3";
        teal3: "#00CAE0";
        teal4: "#E1F5F7";
        green1: "#42782B";
        green2: "#589F39";
        green3: "#7AC45A";
        green4: "#E4F1DE";
        green5: "#F1F8EE";
        yellow1: "#CC9600";
        yellow2: "#FFBA00";
        yellow3: "#FFCE47";
        yellow4: "#FFF4D6";
        yellow5: "#FFF9EA";
        orange1: "#CC7A00";
        orange2: "#FE9900";
        orange3: "#FFB647";
        orange4: "#FFEFD6";
        orange5: "#FFF7EA";
        red1: "#A20214";
        red2: "#D0021B";
        red3: "#FD213B";
        red4: "#FFD7DB";
        red5: "#FFEFF1";
        black: "#222222";
        darkgray1: "";
        darkgray2: "";
        darkgray3: "#777777";
        darkgray4: "";
        gray1: "#9B9B9B";
        gray2: "#CACACA";
        gray3: "#E8E8E8";
        gray4: "#F4F4F4";
        gray5: "#F8F8F8";
        white: "#FFFFFF";
    };
    readonly durations: {
        xxxs: 100;
        xxs: 150;
        xs: 300;
        sm: 500;
        md: 1000;
        lg: 2000;
        xl: 4000;
        xxl: 6000;
        xxxl: 8000;
        xxxxl: 10000;
    };
    readonly fonts: {
        body: string;
        heading: string;
        monospace: string;
        urls: {
            body: string;
        };
    };
    readonly fontSizes: {
        h1: "32px";
        h2: "24px";
        h3: "20px";
        h4: "18px";
        h5: "16px";
        h6: "14px";
        body: "14px";
        xxs: "10px";
        xs: "12px";
        sm: "14px";
        md: "16px";
        lg: "18px";
        xl: "20px";
        xxl: "24px";
        xxxl: "32px";
    };
    readonly fontWeights: {
        body: 400;
        heading: 700;
        normal: 400;
        bold: 700;
    };
    readonly gradients: {
        toDark: "linear-gradient(180deg, rgba(0, 0, 0, 0.00) 3%, #101426 100%)";
        toLight: "linear-gradient(0deg, #FFFFFF 0%, rgba(255, 255, 255, 0.00) 100%)";
    };
    readonly letterSpacings: any[];
    readonly lineHeights: {
        xs: 1;
        sm: 1.25;
        md: 1.5;
        lg: 1.75;
        xl: 2;
        xxl: 2.5;
        0: 1;
        1: 1.25;
        2: 1.5;
        3: 1.75;
        4: 2;
        5: 2.5;
        length: 6;
        toString(): string;
        toLocaleString(): string;
        pop(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        push(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        concat(...items: ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        concat(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75 | ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        join(separator?: string): string;
        reverse(): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        shift(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        slice(start?: number, end?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        sort(compareFn?: (a: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, b: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75) => number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        splice(start: number, deleteCount?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        splice(start: number, deleteCount: number, ...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        unshift(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        indexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        lastIndexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        every<S_3 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_3, thisArg?: any): this is S_3[];
        every(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => void, thisArg?: any): void;
        map<U_3>(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_3, thisArg?: any): U_3[];
        filter<S_4 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_4, thisArg?: any): S_4[];
        filter(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce<U_4>(callbackfn: (previousValue: U_4, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_4, initialValue: U_4): U_4;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight<U_5>(callbackfn: (previousValue: U_5, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_5, initialValue: U_5): U_5;
        find<S_5 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (this: void, value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_5, thisArg?: any): S_5;
        find(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        findIndex(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): number;
        fill(value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, start?: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        copyWithin(target: number, start: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        entries(): IterableIterator<[number, 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        includes(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly mediaQueries: {
        ip5: string;
        tablet: string;
        desktop: string;
    };
    readonly radii: {
        none: "0";
        xs: "2px";
        sm: "4px";
        md: "8px";
        lg: "14px";
        xl: "20px";
        pill: string;
        circle: string;
    };
    readonly shadows: {
        none: "none";
        sm: "0px 2px 4px rgba(0,0,0,.5)";
        md: "0px 0px 8px rgba(0,0,0,.3)";
        lg: "2px 2px 14px rgba(0,0,0,.3)";
    };
    readonly sizes: {
        xxxs: "12px";
        xxs: "16px";
        xs: "20px";
        sm: "24px";
        md: "28px";
        lg: "32px";
        xl: "48px";
        xxl: "64px";
        xxxl: "80px";
        xxxxl: "96px";
        xxxxxl: "128px";
        buttonMaxWidth: "352px";
        $sm: "236px";
        $md: "480px";
        $lg: "636px";
        $xl: "864px";
        vW: "100vw";
        vH: "100vh";
        quarter: "25%";
        third: "33.33%";
        half: "50%";
        twoThird: "66.66%";
        threeQuarter: "75%";
        full: "100%";
    };
    readonly space: {
        none: "0px";
        xxxs: "2px";
        xxs: "4px";
        xs: "8px";
        sm: "12px";
        md: "16px";
        lg: "24px";
        xl: "32px";
        xxl: "48px";
        xxxl: "64px";
        xxxxl: "96px";
        xxxxxl: "128px";
    };
    readonly zIndices: {
        initial: "auto";
        neutral: 0;
        up: 1;
        down: -1;
        notification: 1900;
        tooltip: 1800;
        modal: 1700;
        dropdown: 1600;
    };
}['fontSizes'];
export type Shadows = keyof {
    readonly borders: {
        none: string;
        sm: string;
    };
    readonly borderStyles: {
        none: string;
        solid: string;
    };
    readonly borderWidths: {
        none: "0px";
        sm: "1px";
        md: "2px";
        lg: "3px";
        xl: "4px";
        0: "0px";
        1: "1px";
        2: "2px";
        3: "3px";
        4: "4px";
        length: 5;
        toString(): string;
        toLocaleString(): string;
        pop(): "0px" | "2px" | "4px" | "1px" | "3px";
        push(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        concat(...items: ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        concat(...items: ("0px" | "2px" | "4px" | "1px" | "3px" | ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">)[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        join(separator?: string): string;
        reverse(): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        shift(): "0px" | "2px" | "4px" | "1px" | "3px";
        slice(start?: number, end?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        sort(compareFn?: (a: "0px" | "2px" | "4px" | "1px" | "3px", b: "0px" | "2px" | "4px" | "1px" | "3px") => number): ["0px", "1px", "2px", "3px", "4px"];
        splice(start: number, deleteCount?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        splice(start: number, deleteCount: number, ...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        unshift(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        indexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        lastIndexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        every<S extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U, thisArg?: any): U[];
        filter<S_1 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (this: void, value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): "0px" | "2px" | "4px" | "1px" | "3px";
        findIndex(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): number;
        fill(value: "0px" | "2px" | "4px" | "1px" | "3px", start?: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        copyWithin(target: number, start: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        entries(): IterableIterator<[number, "0px" | "2px" | "4px" | "1px" | "3px"]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        includes(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly breakpoints: {
        0: "576px";
        1: "768px";
        2: "992px";
        3: "1200px";
        4: "1400px";
        sm: "576px";
        md: "768px";
        lg: "992px";
        xl: "1200px";
        xxl: "1400px";
    };
    readonly colors: {
        text: "#222222";
        textLighter: "#9B9B9B";
        link: "#38699F";
        linkHover: "#598DC5";
        linkActive: "#2A5079";
        border: "#CACACA";
        line: "#E8E8E8";
        background: "#F4F4F4";
        highlight: "#FFF4D6";
        muted: "#CACACA";
        primary: "#FFBA00";
        primaryDark: "#CC9600";
        primaryLight: "#FFCE47";
        primaryBG: "#FFF4D6";
        primaryBGLight: "#FFF9EA";
        secondary: "#589F39";
        secondaryDark: "#42782B";
        secondaryLight: "#7AC45A";
        secondaryBG: "#E4F1DE";
        secondaryBGLight: "#F1F8EE";
        accent: "#FE9900";
        accentDark: "#CC7A00";
        accentLight: "#FFB647";
        accentBG: "#FFEFD6";
        accentBGLight: "#FFF7EA";
        neutral: "#CACACA";
        neutralDark: "#9B9B9B";
        neutralLight: "#E8E8E8";
        neutralBG: "#F4F4F4";
        neutralBGLight: "#F8F8F8";
        critical: "#D0021B";
        criticalDark: "#A20214";
        criticalLight: "#FD213B";
        criticalBG: "#FFD7DB";
        criticalBGLight: "#FFEFF1";
        info: "#4A90E2";
        infoDark: "#2275D3";
        infoLight: "#84B4EB";
        infoBG: "#E0EFFF";
        infoBGLight: "#EFF6FF";
        positive: "#589F39";
        positiveDark: "#42782B";
        positiveLight: "#7AC45A";
        positiveBG: "#E4F1DE";
        positiveBGLight: "#F1F8EE";
        caution: "#FFBA00";
        cautionDark: "#CC9600";
        cautionLight: "#FFCE47";
        cautionBG: "#FFF4D6";
        cautionBGLight: "#FFF9EA";
        blue1: "#2275D3";
        blue2: "#4A90E2";
        blue3: "#84B4EB";
        blue4: "#E0EFFF";
        blue5: "#EFF6FF";
        darkblue1: "#2A5079";
        darkblue2: "#38699F";
        darkblue3: "#598DC5";
        darkblue4: "#E1EAF4";
        teal1: "#005C66";
        teal2: "#0094A3";
        teal3: "#00CAE0";
        teal4: "#E1F5F7";
        green1: "#42782B";
        green2: "#589F39";
        green3: "#7AC45A";
        green4: "#E4F1DE";
        green5: "#F1F8EE";
        yellow1: "#CC9600";
        yellow2: "#FFBA00";
        yellow3: "#FFCE47";
        yellow4: "#FFF4D6";
        yellow5: "#FFF9EA";
        orange1: "#CC7A00";
        orange2: "#FE9900";
        orange3: "#FFB647";
        orange4: "#FFEFD6";
        orange5: "#FFF7EA";
        red1: "#A20214";
        red2: "#D0021B";
        red3: "#FD213B";
        red4: "#FFD7DB";
        red5: "#FFEFF1";
        black: "#222222";
        darkgray1: "";
        darkgray2: "";
        darkgray3: "#777777";
        darkgray4: "";
        gray1: "#9B9B9B";
        gray2: "#CACACA";
        gray3: "#E8E8E8";
        gray4: "#F4F4F4";
        gray5: "#F8F8F8";
        white: "#FFFFFF";
    };
    readonly durations: {
        xxxs: 100;
        xxs: 150;
        xs: 300;
        sm: 500;
        md: 1000;
        lg: 2000;
        xl: 4000;
        xxl: 6000;
        xxxl: 8000;
        xxxxl: 10000;
    };
    readonly fonts: {
        body: string;
        heading: string;
        monospace: string;
        urls: {
            body: string;
        };
    };
    readonly fontSizes: {
        h1: "32px";
        h2: "24px";
        h3: "20px";
        h4: "18px";
        h5: "16px";
        h6: "14px";
        body: "14px";
        xxs: "10px";
        xs: "12px";
        sm: "14px";
        md: "16px";
        lg: "18px";
        xl: "20px";
        xxl: "24px";
        xxxl: "32px";
    };
    readonly fontWeights: {
        body: 400;
        heading: 700;
        normal: 400;
        bold: 700;
    };
    readonly gradients: {
        toDark: "linear-gradient(180deg, rgba(0, 0, 0, 0.00) 3%, #101426 100%)";
        toLight: "linear-gradient(0deg, #FFFFFF 0%, rgba(255, 255, 255, 0.00) 100%)";
    };
    readonly letterSpacings: any[];
    readonly lineHeights: {
        xs: 1;
        sm: 1.25;
        md: 1.5;
        lg: 1.75;
        xl: 2;
        xxl: 2.5;
        0: 1;
        1: 1.25;
        2: 1.5;
        3: 1.75;
        4: 2;
        5: 2.5;
        length: 6;
        toString(): string;
        toLocaleString(): string;
        pop(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        push(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        concat(...items: ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        concat(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75 | ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        join(separator?: string): string;
        reverse(): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        shift(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        slice(start?: number, end?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        sort(compareFn?: (a: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, b: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75) => number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        splice(start: number, deleteCount?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        splice(start: number, deleteCount: number, ...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        unshift(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        indexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        lastIndexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        every<S_3 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_3, thisArg?: any): this is S_3[];
        every(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => void, thisArg?: any): void;
        map<U_3>(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_3, thisArg?: any): U_3[];
        filter<S_4 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_4, thisArg?: any): S_4[];
        filter(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce<U_4>(callbackfn: (previousValue: U_4, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_4, initialValue: U_4): U_4;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight<U_5>(callbackfn: (previousValue: U_5, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_5, initialValue: U_5): U_5;
        find<S_5 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (this: void, value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_5, thisArg?: any): S_5;
        find(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        findIndex(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): number;
        fill(value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, start?: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        copyWithin(target: number, start: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        entries(): IterableIterator<[number, 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        includes(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly mediaQueries: {
        ip5: string;
        tablet: string;
        desktop: string;
    };
    readonly radii: {
        none: "0";
        xs: "2px";
        sm: "4px";
        md: "8px";
        lg: "14px";
        xl: "20px";
        pill: string;
        circle: string;
    };
    readonly shadows: {
        none: "none";
        sm: "0px 2px 4px rgba(0,0,0,.5)";
        md: "0px 0px 8px rgba(0,0,0,.3)";
        lg: "2px 2px 14px rgba(0,0,0,.3)";
    };
    readonly sizes: {
        xxxs: "12px";
        xxs: "16px";
        xs: "20px";
        sm: "24px";
        md: "28px";
        lg: "32px";
        xl: "48px";
        xxl: "64px";
        xxxl: "80px";
        xxxxl: "96px";
        xxxxxl: "128px";
        buttonMaxWidth: "352px";
        $sm: "236px";
        $md: "480px";
        $lg: "636px";
        $xl: "864px";
        vW: "100vw";
        vH: "100vh";
        quarter: "25%";
        third: "33.33%";
        half: "50%";
        twoThird: "66.66%";
        threeQuarter: "75%";
        full: "100%";
    };
    readonly space: {
        none: "0px";
        xxxs: "2px";
        xxs: "4px";
        xs: "8px";
        sm: "12px";
        md: "16px";
        lg: "24px";
        xl: "32px";
        xxl: "48px";
        xxxl: "64px";
        xxxxl: "96px";
        xxxxxl: "128px";
    };
    readonly zIndices: {
        initial: "auto";
        neutral: 0;
        up: 1;
        down: -1;
        notification: 1900;
        tooltip: 1800;
        modal: 1700;
        dropdown: 1600;
    };
}['shadows'];
export type BorderWidths = keyof {
    readonly borders: {
        none: string;
        sm: string;
    };
    readonly borderStyles: {
        none: string;
        solid: string;
    };
    readonly borderWidths: {
        none: "0px";
        sm: "1px";
        md: "2px";
        lg: "3px";
        xl: "4px";
        0: "0px";
        1: "1px";
        2: "2px";
        3: "3px";
        4: "4px";
        length: 5;
        toString(): string;
        toLocaleString(): string;
        pop(): "0px" | "2px" | "4px" | "1px" | "3px";
        push(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        concat(...items: ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        concat(...items: ("0px" | "2px" | "4px" | "1px" | "3px" | ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">)[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        join(separator?: string): string;
        reverse(): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        shift(): "0px" | "2px" | "4px" | "1px" | "3px";
        slice(start?: number, end?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        sort(compareFn?: (a: "0px" | "2px" | "4px" | "1px" | "3px", b: "0px" | "2px" | "4px" | "1px" | "3px") => number): ["0px", "1px", "2px", "3px", "4px"];
        splice(start: number, deleteCount?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        splice(start: number, deleteCount: number, ...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        unshift(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        indexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        lastIndexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        every<S extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U, thisArg?: any): U[];
        filter<S_1 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (this: void, value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): "0px" | "2px" | "4px" | "1px" | "3px";
        findIndex(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): number;
        fill(value: "0px" | "2px" | "4px" | "1px" | "3px", start?: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        copyWithin(target: number, start: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        entries(): IterableIterator<[number, "0px" | "2px" | "4px" | "1px" | "3px"]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        includes(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly breakpoints: {
        0: "576px";
        1: "768px";
        2: "992px";
        3: "1200px";
        4: "1400px";
        sm: "576px";
        md: "768px";
        lg: "992px";
        xl: "1200px";
        xxl: "1400px";
    };
    readonly colors: {
        text: "#222222";
        textLighter: "#9B9B9B";
        link: "#38699F";
        linkHover: "#598DC5";
        linkActive: "#2A5079";
        border: "#CACACA";
        line: "#E8E8E8";
        background: "#F4F4F4";
        highlight: "#FFF4D6";
        muted: "#CACACA";
        primary: "#FFBA00";
        primaryDark: "#CC9600";
        primaryLight: "#FFCE47";
        primaryBG: "#FFF4D6";
        primaryBGLight: "#FFF9EA";
        secondary: "#589F39";
        secondaryDark: "#42782B";
        secondaryLight: "#7AC45A";
        secondaryBG: "#E4F1DE";
        secondaryBGLight: "#F1F8EE";
        accent: "#FE9900";
        accentDark: "#CC7A00";
        accentLight: "#FFB647";
        accentBG: "#FFEFD6";
        accentBGLight: "#FFF7EA";
        neutral: "#CACACA";
        neutralDark: "#9B9B9B";
        neutralLight: "#E8E8E8";
        neutralBG: "#F4F4F4";
        neutralBGLight: "#F8F8F8";
        critical: "#D0021B";
        criticalDark: "#A20214";
        criticalLight: "#FD213B";
        criticalBG: "#FFD7DB";
        criticalBGLight: "#FFEFF1";
        info: "#4A90E2";
        infoDark: "#2275D3";
        infoLight: "#84B4EB";
        infoBG: "#E0EFFF";
        infoBGLight: "#EFF6FF";
        positive: "#589F39";
        positiveDark: "#42782B";
        positiveLight: "#7AC45A";
        positiveBG: "#E4F1DE";
        positiveBGLight: "#F1F8EE";
        caution: "#FFBA00";
        cautionDark: "#CC9600";
        cautionLight: "#FFCE47";
        cautionBG: "#FFF4D6";
        cautionBGLight: "#FFF9EA";
        blue1: "#2275D3";
        blue2: "#4A90E2";
        blue3: "#84B4EB";
        blue4: "#E0EFFF";
        blue5: "#EFF6FF";
        darkblue1: "#2A5079";
        darkblue2: "#38699F";
        darkblue3: "#598DC5";
        darkblue4: "#E1EAF4";
        teal1: "#005C66";
        teal2: "#0094A3";
        teal3: "#00CAE0";
        teal4: "#E1F5F7";
        green1: "#42782B";
        green2: "#589F39";
        green3: "#7AC45A";
        green4: "#E4F1DE";
        green5: "#F1F8EE";
        yellow1: "#CC9600";
        yellow2: "#FFBA00";
        yellow3: "#FFCE47";
        yellow4: "#FFF4D6";
        yellow5: "#FFF9EA";
        orange1: "#CC7A00";
        orange2: "#FE9900";
        orange3: "#FFB647";
        orange4: "#FFEFD6";
        orange5: "#FFF7EA";
        red1: "#A20214";
        red2: "#D0021B";
        red3: "#FD213B";
        red4: "#FFD7DB";
        red5: "#FFEFF1";
        black: "#222222";
        darkgray1: "";
        darkgray2: "";
        darkgray3: "#777777";
        darkgray4: "";
        gray1: "#9B9B9B";
        gray2: "#CACACA";
        gray3: "#E8E8E8";
        gray4: "#F4F4F4";
        gray5: "#F8F8F8";
        white: "#FFFFFF";
    };
    readonly durations: {
        xxxs: 100;
        xxs: 150;
        xs: 300;
        sm: 500;
        md: 1000;
        lg: 2000;
        xl: 4000;
        xxl: 6000;
        xxxl: 8000;
        xxxxl: 10000;
    };
    readonly fonts: {
        body: string;
        heading: string;
        monospace: string;
        urls: {
            body: string;
        };
    };
    readonly fontSizes: {
        h1: "32px";
        h2: "24px";
        h3: "20px";
        h4: "18px";
        h5: "16px";
        h6: "14px";
        body: "14px";
        xxs: "10px";
        xs: "12px";
        sm: "14px";
        md: "16px";
        lg: "18px";
        xl: "20px";
        xxl: "24px";
        xxxl: "32px";
    };
    readonly fontWeights: {
        body: 400;
        heading: 700;
        normal: 400;
        bold: 700;
    };
    readonly gradients: {
        toDark: "linear-gradient(180deg, rgba(0, 0, 0, 0.00) 3%, #101426 100%)";
        toLight: "linear-gradient(0deg, #FFFFFF 0%, rgba(255, 255, 255, 0.00) 100%)";
    };
    readonly letterSpacings: any[];
    readonly lineHeights: {
        xs: 1;
        sm: 1.25;
        md: 1.5;
        lg: 1.75;
        xl: 2;
        xxl: 2.5;
        0: 1;
        1: 1.25;
        2: 1.5;
        3: 1.75;
        4: 2;
        5: 2.5;
        length: 6;
        toString(): string;
        toLocaleString(): string;
        pop(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        push(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        concat(...items: ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        concat(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75 | ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        join(separator?: string): string;
        reverse(): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        shift(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        slice(start?: number, end?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        sort(compareFn?: (a: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, b: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75) => number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        splice(start: number, deleteCount?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        splice(start: number, deleteCount: number, ...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        unshift(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        indexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        lastIndexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        every<S_3 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_3, thisArg?: any): this is S_3[];
        every(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => void, thisArg?: any): void;
        map<U_3>(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_3, thisArg?: any): U_3[];
        filter<S_4 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_4, thisArg?: any): S_4[];
        filter(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce<U_4>(callbackfn: (previousValue: U_4, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_4, initialValue: U_4): U_4;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight<U_5>(callbackfn: (previousValue: U_5, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_5, initialValue: U_5): U_5;
        find<S_5 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (this: void, value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_5, thisArg?: any): S_5;
        find(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        findIndex(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): number;
        fill(value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, start?: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        copyWithin(target: number, start: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        entries(): IterableIterator<[number, 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        includes(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly mediaQueries: {
        ip5: string;
        tablet: string;
        desktop: string;
    };
    readonly radii: {
        none: "0";
        xs: "2px";
        sm: "4px";
        md: "8px";
        lg: "14px";
        xl: "20px";
        pill: string;
        circle: string;
    };
    readonly shadows: {
        none: "none";
        sm: "0px 2px 4px rgba(0,0,0,.5)";
        md: "0px 0px 8px rgba(0,0,0,.3)";
        lg: "2px 2px 14px rgba(0,0,0,.3)";
    };
    readonly sizes: {
        xxxs: "12px";
        xxs: "16px";
        xs: "20px";
        sm: "24px";
        md: "28px";
        lg: "32px";
        xl: "48px";
        xxl: "64px";
        xxxl: "80px";
        xxxxl: "96px";
        xxxxxl: "128px";
        buttonMaxWidth: "352px";
        $sm: "236px";
        $md: "480px";
        $lg: "636px";
        $xl: "864px";
        vW: "100vw";
        vH: "100vh";
        quarter: "25%";
        third: "33.33%";
        half: "50%";
        twoThird: "66.66%";
        threeQuarter: "75%";
        full: "100%";
    };
    readonly space: {
        none: "0px";
        xxxs: "2px";
        xxs: "4px";
        xs: "8px";
        sm: "12px";
        md: "16px";
        lg: "24px";
        xl: "32px";
        xxl: "48px";
        xxxl: "64px";
        xxxxl: "96px";
        xxxxxl: "128px";
    };
    readonly zIndices: {
        initial: "auto";
        neutral: 0;
        up: 1;
        down: -1;
        notification: 1900;
        tooltip: 1800;
        modal: 1700;
        dropdown: 1600;
    };
}['borderWidths'];
export type Radii = keyof {
    readonly borders: {
        none: string;
        sm: string;
    };
    readonly borderStyles: {
        none: string;
        solid: string;
    };
    readonly borderWidths: {
        none: "0px";
        sm: "1px";
        md: "2px";
        lg: "3px";
        xl: "4px";
        0: "0px";
        1: "1px";
        2: "2px";
        3: "3px";
        4: "4px";
        length: 5;
        toString(): string;
        toLocaleString(): string;
        pop(): "0px" | "2px" | "4px" | "1px" | "3px";
        push(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        concat(...items: ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        concat(...items: ("0px" | "2px" | "4px" | "1px" | "3px" | ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">)[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        join(separator?: string): string;
        reverse(): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        shift(): "0px" | "2px" | "4px" | "1px" | "3px";
        slice(start?: number, end?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        sort(compareFn?: (a: "0px" | "2px" | "4px" | "1px" | "3px", b: "0px" | "2px" | "4px" | "1px" | "3px") => number): ["0px", "1px", "2px", "3px", "4px"];
        splice(start: number, deleteCount?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        splice(start: number, deleteCount: number, ...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        unshift(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        indexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        lastIndexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        every<S extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U, thisArg?: any): U[];
        filter<S_1 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (this: void, value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): "0px" | "2px" | "4px" | "1px" | "3px";
        findIndex(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): number;
        fill(value: "0px" | "2px" | "4px" | "1px" | "3px", start?: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        copyWithin(target: number, start: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        entries(): IterableIterator<[number, "0px" | "2px" | "4px" | "1px" | "3px"]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        includes(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly breakpoints: {
        0: "576px";
        1: "768px";
        2: "992px";
        3: "1200px";
        4: "1400px";
        sm: "576px";
        md: "768px";
        lg: "992px";
        xl: "1200px";
        xxl: "1400px";
    };
    readonly colors: {
        text: "#222222";
        textLighter: "#9B9B9B";
        link: "#38699F";
        linkHover: "#598DC5";
        linkActive: "#2A5079";
        border: "#CACACA";
        line: "#E8E8E8";
        background: "#F4F4F4";
        highlight: "#FFF4D6";
        muted: "#CACACA";
        primary: "#FFBA00";
        primaryDark: "#CC9600";
        primaryLight: "#FFCE47";
        primaryBG: "#FFF4D6";
        primaryBGLight: "#FFF9EA";
        secondary: "#589F39";
        secondaryDark: "#42782B";
        secondaryLight: "#7AC45A";
        secondaryBG: "#E4F1DE";
        secondaryBGLight: "#F1F8EE";
        accent: "#FE9900";
        accentDark: "#CC7A00";
        accentLight: "#FFB647";
        accentBG: "#FFEFD6";
        accentBGLight: "#FFF7EA";
        neutral: "#CACACA";
        neutralDark: "#9B9B9B";
        neutralLight: "#E8E8E8";
        neutralBG: "#F4F4F4";
        neutralBGLight: "#F8F8F8";
        critical: "#D0021B";
        criticalDark: "#A20214";
        criticalLight: "#FD213B";
        criticalBG: "#FFD7DB";
        criticalBGLight: "#FFEFF1";
        info: "#4A90E2";
        infoDark: "#2275D3";
        infoLight: "#84B4EB";
        infoBG: "#E0EFFF";
        infoBGLight: "#EFF6FF";
        positive: "#589F39";
        positiveDark: "#42782B";
        positiveLight: "#7AC45A";
        positiveBG: "#E4F1DE";
        positiveBGLight: "#F1F8EE";
        caution: "#FFBA00";
        cautionDark: "#CC9600";
        cautionLight: "#FFCE47";
        cautionBG: "#FFF4D6";
        cautionBGLight: "#FFF9EA";
        blue1: "#2275D3";
        blue2: "#4A90E2";
        blue3: "#84B4EB";
        blue4: "#E0EFFF";
        blue5: "#EFF6FF";
        darkblue1: "#2A5079";
        darkblue2: "#38699F";
        darkblue3: "#598DC5";
        darkblue4: "#E1EAF4";
        teal1: "#005C66";
        teal2: "#0094A3";
        teal3: "#00CAE0";
        teal4: "#E1F5F7";
        green1: "#42782B";
        green2: "#589F39";
        green3: "#7AC45A";
        green4: "#E4F1DE";
        green5: "#F1F8EE";
        yellow1: "#CC9600";
        yellow2: "#FFBA00";
        yellow3: "#FFCE47";
        yellow4: "#FFF4D6";
        yellow5: "#FFF9EA";
        orange1: "#CC7A00";
        orange2: "#FE9900";
        orange3: "#FFB647";
        orange4: "#FFEFD6";
        orange5: "#FFF7EA";
        red1: "#A20214";
        red2: "#D0021B";
        red3: "#FD213B";
        red4: "#FFD7DB";
        red5: "#FFEFF1";
        black: "#222222";
        darkgray1: "";
        darkgray2: "";
        darkgray3: "#777777";
        darkgray4: "";
        gray1: "#9B9B9B";
        gray2: "#CACACA";
        gray3: "#E8E8E8";
        gray4: "#F4F4F4";
        gray5: "#F8F8F8";
        white: "#FFFFFF";
    };
    readonly durations: {
        xxxs: 100;
        xxs: 150;
        xs: 300;
        sm: 500;
        md: 1000;
        lg: 2000;
        xl: 4000;
        xxl: 6000;
        xxxl: 8000;
        xxxxl: 10000;
    };
    readonly fonts: {
        body: string;
        heading: string;
        monospace: string;
        urls: {
            body: string;
        };
    };
    readonly fontSizes: {
        h1: "32px";
        h2: "24px";
        h3: "20px";
        h4: "18px";
        h5: "16px";
        h6: "14px";
        body: "14px";
        xxs: "10px";
        xs: "12px";
        sm: "14px";
        md: "16px";
        lg: "18px";
        xl: "20px";
        xxl: "24px";
        xxxl: "32px";
    };
    readonly fontWeights: {
        body: 400;
        heading: 700;
        normal: 400;
        bold: 700;
    };
    readonly gradients: {
        toDark: "linear-gradient(180deg, rgba(0, 0, 0, 0.00) 3%, #101426 100%)";
        toLight: "linear-gradient(0deg, #FFFFFF 0%, rgba(255, 255, 255, 0.00) 100%)";
    };
    readonly letterSpacings: any[];
    readonly lineHeights: {
        xs: 1;
        sm: 1.25;
        md: 1.5;
        lg: 1.75;
        xl: 2;
        xxl: 2.5;
        0: 1;
        1: 1.25;
        2: 1.5;
        3: 1.75;
        4: 2;
        5: 2.5;
        length: 6;
        toString(): string;
        toLocaleString(): string;
        pop(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        push(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        concat(...items: ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        concat(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75 | ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        join(separator?: string): string;
        reverse(): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        shift(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        slice(start?: number, end?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        sort(compareFn?: (a: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, b: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75) => number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        splice(start: number, deleteCount?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        splice(start: number, deleteCount: number, ...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        unshift(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        indexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        lastIndexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        every<S_3 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_3, thisArg?: any): this is S_3[];
        every(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => void, thisArg?: any): void;
        map<U_3>(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_3, thisArg?: any): U_3[];
        filter<S_4 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_4, thisArg?: any): S_4[];
        filter(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce<U_4>(callbackfn: (previousValue: U_4, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_4, initialValue: U_4): U_4;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight<U_5>(callbackfn: (previousValue: U_5, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_5, initialValue: U_5): U_5;
        find<S_5 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (this: void, value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_5, thisArg?: any): S_5;
        find(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        findIndex(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): number;
        fill(value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, start?: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        copyWithin(target: number, start: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        entries(): IterableIterator<[number, 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        includes(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly mediaQueries: {
        ip5: string;
        tablet: string;
        desktop: string;
    };
    readonly radii: {
        none: "0";
        xs: "2px";
        sm: "4px";
        md: "8px";
        lg: "14px";
        xl: "20px";
        pill: string;
        circle: string;
    };
    readonly shadows: {
        none: "none";
        sm: "0px 2px 4px rgba(0,0,0,.5)";
        md: "0px 0px 8px rgba(0,0,0,.3)";
        lg: "2px 2px 14px rgba(0,0,0,.3)";
    };
    readonly sizes: {
        xxxs: "12px";
        xxs: "16px";
        xs: "20px";
        sm: "24px";
        md: "28px";
        lg: "32px";
        xl: "48px";
        xxl: "64px";
        xxxl: "80px";
        xxxxl: "96px";
        xxxxxl: "128px";
        buttonMaxWidth: "352px";
        $sm: "236px";
        $md: "480px";
        $lg: "636px";
        $xl: "864px";
        vW: "100vw";
        vH: "100vh";
        quarter: "25%";
        third: "33.33%";
        half: "50%";
        twoThird: "66.66%";
        threeQuarter: "75%";
        full: "100%";
    };
    readonly space: {
        none: "0px";
        xxxs: "2px";
        xxs: "4px";
        xs: "8px";
        sm: "12px";
        md: "16px";
        lg: "24px";
        xl: "32px";
        xxl: "48px";
        xxxl: "64px";
        xxxxl: "96px";
        xxxxxl: "128px";
    };
    readonly zIndices: {
        initial: "auto";
        neutral: 0;
        up: 1;
        down: -1;
        notification: 1900;
        tooltip: 1800;
        modal: 1700;
        dropdown: 1600;
    };
}['radii'];
export type Sizes = keyof {
    readonly borders: {
        none: string;
        sm: string;
    };
    readonly borderStyles: {
        none: string;
        solid: string;
    };
    readonly borderWidths: {
        none: "0px";
        sm: "1px";
        md: "2px";
        lg: "3px";
        xl: "4px";
        0: "0px";
        1: "1px";
        2: "2px";
        3: "3px";
        4: "4px";
        length: 5;
        toString(): string;
        toLocaleString(): string;
        pop(): "0px" | "2px" | "4px" | "1px" | "3px";
        push(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        concat(...items: ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        concat(...items: ("0px" | "2px" | "4px" | "1px" | "3px" | ConcatArray<"0px" | "2px" | "4px" | "1px" | "3px">)[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        join(separator?: string): string;
        reverse(): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        shift(): "0px" | "2px" | "4px" | "1px" | "3px";
        slice(start?: number, end?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        sort(compareFn?: (a: "0px" | "2px" | "4px" | "1px" | "3px", b: "0px" | "2px" | "4px" | "1px" | "3px") => number): ["0px", "1px", "2px", "3px", "4px"];
        splice(start: number, deleteCount?: number): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        splice(start: number, deleteCount: number, ...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        unshift(...items: ("0px" | "2px" | "4px" | "1px" | "3px")[]): number;
        indexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        lastIndexOf(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): number;
        every<S extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U, thisArg?: any): U[];
        filter<S_1 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): ("0px" | "2px" | "4px" | "1px" | "3px")[];
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight(callbackfn: (previousValue: "0px" | "2px" | "4px" | "1px" | "3px", currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => "0px" | "2px" | "4px" | "1px" | "3px", initialValue: "0px" | "2px" | "4px" | "1px" | "3px"): "0px" | "2px" | "4px" | "1px" | "3px";
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: "0px" | "2px" | "4px" | "1px" | "3px", currentIndex: number, array: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends "0px" | "2px" | "4px" | "1px" | "3px">(predicate: (this: void, value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): "0px" | "2px" | "4px" | "1px" | "3px";
        findIndex(predicate: (value: "0px" | "2px" | "4px" | "1px" | "3px", index: number, obj: ("0px" | "2px" | "4px" | "1px" | "3px")[]) => unknown, thisArg?: any): number;
        fill(value: "0px" | "2px" | "4px" | "1px" | "3px", start?: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        copyWithin(target: number, start: number, end?: number): ["0px", "1px", "2px", "3px", "4px"];
        entries(): IterableIterator<[number, "0px" | "2px" | "4px" | "1px" | "3px"]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        includes(searchElement: "0px" | "2px" | "4px" | "1px" | "3px", fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<"0px" | "2px" | "4px" | "1px" | "3px">;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly breakpoints: {
        0: "576px";
        1: "768px";
        2: "992px";
        3: "1200px";
        4: "1400px";
        sm: "576px";
        md: "768px";
        lg: "992px";
        xl: "1200px";
        xxl: "1400px";
    };
    readonly colors: {
        text: "#222222";
        textLighter: "#9B9B9B";
        link: "#38699F";
        linkHover: "#598DC5";
        linkActive: "#2A5079";
        border: "#CACACA";
        line: "#E8E8E8";
        background: "#F4F4F4";
        highlight: "#FFF4D6";
        muted: "#CACACA";
        primary: "#FFBA00";
        primaryDark: "#CC9600";
        primaryLight: "#FFCE47";
        primaryBG: "#FFF4D6";
        primaryBGLight: "#FFF9EA";
        secondary: "#589F39";
        secondaryDark: "#42782B";
        secondaryLight: "#7AC45A";
        secondaryBG: "#E4F1DE";
        secondaryBGLight: "#F1F8EE";
        accent: "#FE9900";
        accentDark: "#CC7A00";
        accentLight: "#FFB647";
        accentBG: "#FFEFD6";
        accentBGLight: "#FFF7EA";
        neutral: "#CACACA";
        neutralDark: "#9B9B9B";
        neutralLight: "#E8E8E8";
        neutralBG: "#F4F4F4";
        neutralBGLight: "#F8F8F8";
        critical: "#D0021B";
        criticalDark: "#A20214";
        criticalLight: "#FD213B";
        criticalBG: "#FFD7DB";
        criticalBGLight: "#FFEFF1";
        info: "#4A90E2";
        infoDark: "#2275D3";
        infoLight: "#84B4EB";
        infoBG: "#E0EFFF";
        infoBGLight: "#EFF6FF";
        positive: "#589F39";
        positiveDark: "#42782B";
        positiveLight: "#7AC45A";
        positiveBG: "#E4F1DE";
        positiveBGLight: "#F1F8EE";
        caution: "#FFBA00";
        cautionDark: "#CC9600";
        cautionLight: "#FFCE47";
        cautionBG: "#FFF4D6";
        cautionBGLight: "#FFF9EA";
        blue1: "#2275D3";
        blue2: "#4A90E2";
        blue3: "#84B4EB";
        blue4: "#E0EFFF";
        blue5: "#EFF6FF";
        darkblue1: "#2A5079";
        darkblue2: "#38699F";
        darkblue3: "#598DC5";
        darkblue4: "#E1EAF4";
        teal1: "#005C66";
        teal2: "#0094A3";
        teal3: "#00CAE0";
        teal4: "#E1F5F7";
        green1: "#42782B";
        green2: "#589F39";
        green3: "#7AC45A";
        green4: "#E4F1DE";
        green5: "#F1F8EE";
        yellow1: "#CC9600";
        yellow2: "#FFBA00";
        yellow3: "#FFCE47";
        yellow4: "#FFF4D6";
        yellow5: "#FFF9EA";
        orange1: "#CC7A00";
        orange2: "#FE9900";
        orange3: "#FFB647";
        orange4: "#FFEFD6";
        orange5: "#FFF7EA";
        red1: "#A20214";
        red2: "#D0021B";
        red3: "#FD213B";
        red4: "#FFD7DB";
        red5: "#FFEFF1";
        black: "#222222";
        darkgray1: "";
        darkgray2: "";
        darkgray3: "#777777";
        darkgray4: "";
        gray1: "#9B9B9B";
        gray2: "#CACACA";
        gray3: "#E8E8E8";
        gray4: "#F4F4F4";
        gray5: "#F8F8F8";
        white: "#FFFFFF";
    };
    readonly durations: {
        xxxs: 100;
        xxs: 150;
        xs: 300;
        sm: 500;
        md: 1000;
        lg: 2000;
        xl: 4000;
        xxl: 6000;
        xxxl: 8000;
        xxxxl: 10000;
    };
    readonly fonts: {
        body: string;
        heading: string;
        monospace: string;
        urls: {
            body: string;
        };
    };
    readonly fontSizes: {
        h1: "32px";
        h2: "24px";
        h3: "20px";
        h4: "18px";
        h5: "16px";
        h6: "14px";
        body: "14px";
        xxs: "10px";
        xs: "12px";
        sm: "14px";
        md: "16px";
        lg: "18px";
        xl: "20px";
        xxl: "24px";
        xxxl: "32px";
    };
    readonly fontWeights: {
        body: 400;
        heading: 700;
        normal: 400;
        bold: 700;
    };
    readonly gradients: {
        toDark: "linear-gradient(180deg, rgba(0, 0, 0, 0.00) 3%, #101426 100%)";
        toLight: "linear-gradient(0deg, #FFFFFF 0%, rgba(255, 255, 255, 0.00) 100%)";
    };
    readonly letterSpacings: any[];
    readonly lineHeights: {
        xs: 1;
        sm: 1.25;
        md: 1.5;
        lg: 1.75;
        xl: 2;
        xxl: 2.5;
        0: 1;
        1: 1.25;
        2: 1.5;
        3: 1.75;
        4: 2;
        5: 2.5;
        length: 6;
        toString(): string;
        toLocaleString(): string;
        pop(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        push(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        concat(...items: ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        concat(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75 | ConcatArray<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        join(separator?: string): string;
        reverse(): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        shift(): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        slice(start?: number, end?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        sort(compareFn?: (a: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, b: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75) => number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        splice(start: number, deleteCount?: number): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        splice(start: number, deleteCount: number, ...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        unshift(...items: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]): number;
        indexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        lastIndexOf(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): number;
        every<S_3 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_3, thisArg?: any): this is S_3[];
        every(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => void, thisArg?: any): void;
        map<U_3>(callbackfn: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_3, thisArg?: any): U_3[];
        filter<S_4 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_4, thisArg?: any): S_4[];
        filter(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[];
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduce<U_4>(callbackfn: (previousValue: U_4, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_4, initialValue: U_4): U_4;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight(callbackfn: (previousValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, initialValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        reduceRight<U_5>(callbackfn: (previousValue: U_5, currentValue: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, currentIndex: number, array: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => U_5, initialValue: U_5): U_5;
        find<S_5 extends 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>(predicate: (this: void, value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => value is S_5, thisArg?: any): S_5;
        find(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75;
        findIndex(predicate: (value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, index: number, obj: (1 | 2 | 2.5 | 1.5 | 1.25 | 1.75)[]) => unknown, thisArg?: any): number;
        fill(value: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, start?: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        copyWithin(target: number, start: number, end?: number): [1, 1.25, 1.5, 1.75, 2, 2.5];
        entries(): IterableIterator<[number, 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        includes(searchElement: 1 | 2 | 2.5 | 1.5 | 1.25 | 1.75, fromIndex?: number): boolean;
        [Symbol.iterator](): IterableIterator<1 | 2 | 2.5 | 1.5 | 1.25 | 1.75>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
    readonly mediaQueries: {
        ip5: string;
        tablet: string;
        desktop: string;
    };
    readonly radii: {
        none: "0";
        xs: "2px";
        sm: "4px";
        md: "8px";
        lg: "14px";
        xl: "20px";
        pill: string;
        circle: string;
    };
    readonly shadows: {
        none: "none";
        sm: "0px 2px 4px rgba(0,0,0,.5)";
        md: "0px 0px 8px rgba(0,0,0,.3)";
        lg: "2px 2px 14px rgba(0,0,0,.3)";
    };
    readonly sizes: {
        xxxs: "12px";
        xxs: "16px";
        xs: "20px";
        sm: "24px";
        md: "28px";
        lg: "32px";
        xl: "48px";
        xxl: "64px";
        xxxl: "80px";
        xxxxl: "96px";
        xxxxxl: "128px";
        buttonMaxWidth: "352px";
        $sm: "236px";
        $md: "480px";
        $lg: "636px";
        $xl: "864px";
        vW: "100vw";
        vH: "100vh";
        quarter: "25%";
        third: "33.33%";
        half: "50%";
        twoThird: "66.66%";
        threeQuarter: "75%";
        full: "100%";
    };
    readonly space: {
        none: "0px";
        xxxs: "2px";
        xxs: "4px";
        xs: "8px";
        sm: "12px";
        md: "16px";
        lg: "24px";
        xl: "32px";
        xxl: "48px";
        xxxl: "64px";
        xxxxl: "96px";
        xxxxxl: "128px";
    };
    readonly zIndices: {
        initial: "auto";
        neutral: 0;
        up: 1;
        down: -1;
        notification: 1900;
        tooltip: 1800;
        modal: 1700;
        dropdown: 1600;
    };
}['sizes'];
/**
 * - Themeable style object
 */
export type ThemableStyle = {
    fontFamily?: Fonts | Fonts[];
    fontSize?: FontSizes | FontSizes[];
    fontWeight?: FontWeights | FontWeights[];
    lineHeight?: string | string[];
    letterSpacing?: string | string[];
    color?: Colors | Colors[];
    backgroundColor?: Colors | Colors[];
    /**
     * short hand for background color
     */
    bg?: Colors | Colors[];
    margin?: Space | Space[];
    m?: Space | Space[];
    marginTop?: Space | Space[];
    mt?: Space | Space[];
    marginRight?: Space | Space[];
    mr?: Space | Space[];
    marginBottom?: Space | Space[];
    mb?: Space | Space[];
    marginLeft?: Space | Space[];
    ml?: Space | Space[];
    marginX?: Space | Space[];
    mx?: Space | Space[];
    marginY?: Space | Space[];
    my?: Space | Space[];
    padding?: Space | Space[];
    p?: Space | Space[];
    paddingTop?: Space | Space[];
    pt?: Space | Space[];
    paddingRight?: Space | Space[];
    pr?: Space | Space[];
    paddingBottom?: Space | Space[];
    pb?: Space | Space[];
    paddingLeft?: Space | Space[];
    pl?: Space | Space[];
    paddingX?: Space | Space[];
    px?: Space | Space[];
    paddingY?: Space | Space[];
    py?: Space | Space[];
    top?: Space | Space[];
    bottom?: Space | Space[];
    left?: Space | Space[];
    right?: Space | Space[];
    border?: string | string[];
    borderTop?: string | string[];
    borderRight?: string | string[];
    borderBottom?: string | string[];
    borderLeft?: string | string[];
    borderColor?: Colors | Colors[];
    borderWidth?: BorderWidths | BorderWidths[];
    borderStyle?: string | string[];
    borderRadius?: Radii | Radii[];
    boxShadow?: Shadows | Shadows[];
    textShadow?: Shadows | Shadows[];
    zIndex?: number | number[];
    width?: Sizes | Sizes[];
    minWidth?: Sizes | Sizes[];
    maxWidth?: Sizes | Sizes[];
    height?: Sizes | Sizes[];
    minHeight?: Sizes | Sizes[];
    maxHeight?: Sizes | Sizes[];
    size?: Sizes | Sizes[];
};
/**
 * All standard CSS properties as regular object, except those from ThemableStyle
 */
export type StandardCSSProperties = Omit<CSSProperties, keyof ThemableStyle>;
